{"version":3,"sources":["actions.js","Add.js","Link.js","LinkContainers.js","Links.js","Todo.js","VisibleTodos.js","VisibleTodoList.js","App.js","serviceWorker.js","reducer.js","index.js"],"names":["ADD_ITEM","REMOVE_ITEM","TOGGLE_ITEM","SET_VISIBILITY_FILTER","VisibilityFilters","nextItemId","Add","input","Card","className","Body","Form","onSubmit","e","text","preventDefault","value","trim","console","log","props","dispatch","type","id","ref","node","Button","React","Component","connect","Link","Nav","Item","eventKey","this","children","onClick","disabled","active","LinkContainer","state","ownProps","filter","visibilityFilter","Links","variant","defaultActiveKey","Todo","style","textDecoration","completed","removeClick","VisibleTodos","Table","items","map","item","onItemClick","getVisibleItems","t","VisibleTodoList","toggleItem","removeItem","App","Navbar","bg","Brand","Container","Boolean","window","location","hostname","match","rootReducer","combineReducers","action","v","Object","assign","persistedState","serializedState","localStorage","getItem","JSON","parse","loadState","store","createStore","subscribe","stringify","setItem","saveState","getState","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.6278e3a5.chunk.js","sourcesContent":["export const ADD_ITEM = \"ADD_ITEM\";\r\nexport const REMOVE_ITEM = \"REMOVE_ITEM \";\r\nexport const TOGGLE_ITEM = \"TOGGLE_ITEM\";\r\nexport const SET_VISIBILITY_FILTER = \"SET_VISIBILITY_FILTER\";\r\n\r\nexport const VisibilityFilters = {\r\n  SHOW_ALL: \"SHOW_ALL\",\r\n  SHOW_COMPLETED: \"SHOW_COMPLETED\",\r\n  SHOW_ACTIVE: \"SHOW_ACTIVE\",\r\n};\r\n\r\nlet nextItemId = 0;\r\nexport function addItem(text) {\r\n  return {\r\n    type: ADD_ITEM,\r\n    id: nextItemId++,\r\n    text,\r\n  };\r\n}\r\n\r\nexport function removeItem(id) {\r\n  return {\r\n    type: REMOVE_ITEM,\r\n    id,\r\n  };\r\n}\r\n\r\nexport function toggleItem(id) {\r\n  return {\r\n    type: TOGGLE_ITEM,\r\n    id,\r\n  };\r\n}\r\n\r\nexport function setVisibilityFilter(filter) {\r\n  return {\r\n    type: SET_VISIBILITY_FILTER,\r\n    filter,\r\n  };\r\n}\r\n","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { addItem } from \"./actions\";\r\nimport Card from \"react-bootstrap/Card\";\r\nimport Form from \"react-bootstrap/Form\";\r\nimport Button from \"react-bootstrap/Button\";\r\n\r\nclass Add extends React.Component {\r\n  render() {\r\n    let input;\r\n\r\n    return (\r\n      <Card className=\"mb-5 mt-2\">\r\n        <Card.Body>\r\n          <Form\r\n            onSubmit={(e) => {\r\n              e.preventDefault();\r\n              if (!input.value.trim()) {\r\n                return;\r\n              }\r\n              console.log(input.value);\r\n              this.props.dispatch(addItem(input.value));\r\n              input.value = \"\";\r\n            }}\r\n          >\r\n            <input\r\n              ref={(node) => {\r\n                input = node;\r\n              }}\r\n            />\r\n            <Button className=\"ml-5\" type=\"submit\">\r\n              Add Todo\r\n            </Button>\r\n          </Form>\r\n        </Card.Body>\r\n      </Card>\r\n    );\r\n  }\r\n}\r\n\r\nexport default connect()(Add);\r\n","import React from \"react\";\r\nimport Nav from \"react-bootstrap/Nav\";\r\n\r\nclass Link extends React.Component {\r\n  render() {\r\n    return (\r\n      <>\r\n        <Nav.Item>\r\n          <Nav.Link\r\n            eventKey={this.props.children}\r\n            onClick={this.props.onClick}\r\n            disabled={this.props.active}\r\n          >\r\n            {this.props.children}\r\n          </Nav.Link>\r\n        </Nav.Item>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Link;\r\n","import { connect } from \"react-redux\";\r\nimport { setVisibilityFilter } from \"./actions\";\r\nimport Link from \"./Link\";\r\n\r\nfunction mapStateToProps(state, ownProps) {\r\n  return {\r\n    active: ownProps.filter === state.visibilityFilter,\r\n  };\r\n}\r\n\r\nfunction mapDispatchToProps(dispatch, ownProps) {\r\n  return {\r\n    onClick: () => {\r\n      dispatch(setVisibilityFilter(ownProps.filter));\r\n    },\r\n  };\r\n}\r\n\r\nconst LinkContainer = connect(mapStateToProps, mapDispatchToProps)(Link);\r\n\r\nexport default LinkContainer;\r\n","import React from \"react\";\r\nimport Nav from \"react-bootstrap/Nav\";\r\nimport LinkContainer from \"./LinkContainers\";\r\nimport { VisibilityFilters } from \"./actions\";\r\n\r\nclass Links extends React.Component {\r\n  render() {\r\n    return (\r\n      <>\r\n        <Nav variant=\"tabs\" defaultActiveKey=\"All\">\r\n          <LinkContainer filter={VisibilityFilters.SHOW_ALL}>All</LinkContainer>\r\n          <LinkContainer filter={VisibilityFilters.SHOW_ACTIVE}>\r\n            Active\r\n          </LinkContainer>\r\n          <LinkContainer filter={VisibilityFilters.SHOW_COMPLETED}>\r\n            Completed\r\n          </LinkContainer>\r\n        </Nav>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Links;\r\n","import React from \"react\";\r\nimport Button from \"react-bootstrap/Button\";\r\n\r\nclass Todo extends React.Component {\r\n  render() {\r\n    console.log(this.props);\r\n    return (\r\n      <tr>\r\n        <td>{this.props.id}</td>\r\n\r\n        <td>\r\n          <span\r\n            style={{\r\n              textDecoration: this.props.completed ? \"line-through\" : \"none\",\r\n            }}\r\n            onClick={this.props.onClick}\r\n          >\r\n            {this.props.text}\r\n          </span>\r\n        </td>\r\n\r\n        <td>\r\n          <Button variant=\"danger\" onClick={this.props.removeClick}>\r\n            remove\r\n          </Button>\r\n        </td>\r\n      </tr>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Todo;\r\n","import React from \"react\";\r\nimport Table from \"react-bootstrap/Table\";\r\nimport Todo from \"./Todo\";\r\n\r\nclass VisibleTodos extends React.Component {\r\n  render() {\r\n    return (\r\n      <>\r\n        <Table>\r\n          <thead>\r\n            <tr>\r\n              <th> ID</th>\r\n              <th>TodoList</th>\r\n              <th>Action</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            {this.props.items.map((item) => (\r\n              <Todo\r\n                key={item.id}\r\n                {...item}\r\n                onClick={() => this.props.onItemClick(item.id)}\r\n                removeClick={() => this.props.removeClick(item.id)}\r\n              />\r\n            ))}\r\n          </tbody>\r\n        </Table>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default VisibleTodos;\r\n","import { connect } from \"react-redux\";\r\nimport { toggleItem } from \"./actions\";\r\nimport { removeItem } from \"./actions\";\r\nimport VisibleTodos from \"./VisibleTodos\";\r\n\r\nfunction getVisibleItems(items, filter) {\r\n  switch (filter) {\r\n    case \"SHOW_COMPLETED\":\r\n      return items.filter((t) => t.completed);\r\n    case \"SHOW_ACTIVE\":\r\n      return items.filter((t) => !t.completed);\r\n    case \"SHOW_ALL\":\r\n    default:\r\n      return items;\r\n  }\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n  return {\r\n    items: getVisibleItems(state.items, state.visibilityFilter),\r\n  };\r\n}\r\n\r\nfunction mapDispatchToProps(dispatch) {\r\n  return {\r\n    onItemClick: (id) => {\r\n      dispatch(toggleItem(id));\r\n    },\r\n    removeClick: (id) => {\r\n      dispatch(removeItem(id));\r\n    },\r\n  };\r\n}\r\n\r\nconst VisibleTodoList = connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(VisibleTodos);\r\n\r\nexport default VisibleTodoList;\r\n","import React from \"react\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport Navbar from \"react-bootstrap/Navbar\";\nimport Container from \"react-bootstrap/Container\";\nimport Add from \"./Add\";\nimport Links from \"./Links\";\nimport VisibleTodoList from \"./VisibleTodoList\";\n\nclass App extends React.Component {\n  render() {\n    return (\n      <>\n        <Navbar bg=\"info\" variant=\"dark\">\n          <Navbar.Brand> Todo Redux App</Navbar.Brand>\n        </Navbar>\n        <Container>\n          <Add/>\n          <Links/>\n          <VisibleTodoList/>\n        </Container>\n      </>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n    window.location.hostname === 'localhost' ||\r\n      // [::1] is the IPv6 localhost address.\r\n      window.location.hostname === '[::1]' ||\r\n      // 127.0.0.0/8 are considered localhost for IPv4.\r\n      window.location.hostname.match(\r\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n      )\r\n  );\r\n  \r\n  export function register(config) {\r\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n      // The URL constructor is available in all browsers that support SW.\r\n      const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n      if (publicUrl.origin !== window.location.origin) {\r\n        // Our service worker won't work if PUBLIC_URL is on a different origin\r\n        // from what our page is served on. This might happen if a CDN is used to\r\n        // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n        return;\r\n      }\r\n  \r\n      window.addEventListener('load', () => {\r\n        const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n  \r\n        if (isLocalhost) {\r\n          // This is running on localhost. Let's check if a service worker still exists or not.\r\n          checkValidServiceWorker(swUrl, config);\r\n  \r\n          // Add some additional logging to localhost, pointing developers to the\r\n          // service worker/PWA documentation.\r\n          navigator.serviceWorker.ready.then(() => {\r\n            console.log(\r\n              'This web app is being served cache-first by a service ' +\r\n                'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n            );\r\n          });\r\n        } else {\r\n          // Is not localhost. Just register service worker\r\n          registerValidSW(swUrl, config);\r\n        }\r\n      });\r\n    }\r\n  }\r\n  \r\n  function registerValidSW(swUrl, config) {\r\n    navigator.serviceWorker\r\n      .register(swUrl)\r\n      .then(registration => {\r\n        registration.onupdatefound = () => {\r\n          const installingWorker = registration.installing;\r\n          if (installingWorker == null) {\r\n            return;\r\n          }\r\n          installingWorker.onstatechange = () => {\r\n            if (installingWorker.state === 'installed') {\r\n              if (navigator.serviceWorker.controller) {\r\n                // At this point, the updated precached content has been fetched,\r\n                // but the previous service worker will still serve the older\r\n                // content until all client tabs are closed.\r\n                console.log(\r\n                  'New content is available and will be used when all ' +\r\n                    'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n                );\r\n  \r\n                // Execute callback\r\n                if (config && config.onUpdate) {\r\n                  config.onUpdate(registration);\r\n                }\r\n              } else {\r\n                // At this point, everything has been precached.\r\n                // It's the perfect time to display a\r\n                // \"Content is cached for offline use.\" message.\r\n                console.log('Content is cached for offline use.');\r\n  \r\n                // Execute callback\r\n                if (config && config.onSuccess) {\r\n                  config.onSuccess(registration);\r\n                }\r\n              }\r\n            }\r\n          };\r\n        };\r\n      })\r\n      .catch(error => {\r\n        console.error('Error during service worker registration:', error);\r\n      });\r\n  }\r\n  \r\n  function checkValidServiceWorker(swUrl, config) {\r\n    // Check if the service worker can be found. If it can't reload the page.\r\n    fetch(swUrl, {\r\n      headers: { 'Service-Worker': 'script' },\r\n    })\r\n      .then(response => {\r\n        // Ensure service worker exists, and that we really are getting a JS file.\r\n        const contentType = response.headers.get('content-type');\r\n        if (\r\n          response.status === 404 ||\r\n          (contentType != null && contentType.indexOf('javascript') === -1)\r\n        ) {\r\n          // No service worker found. Probably a different app. Reload the page.\r\n          navigator.serviceWorker.ready.then(registration => {\r\n            registration.unregister().then(() => {\r\n              window.location.reload();\r\n            });\r\n          });\r\n        } else {\r\n          // Service worker found. Proceed as normal.\r\n          registerValidSW(swUrl, config);\r\n        }\r\n      })\r\n      .catch(() => {\r\n        console.log(\r\n          'No internet connection found. App is running in offline mode.'\r\n        );\r\n      });\r\n  }\r\n  \r\n  export function unregister() {\r\n    if ('serviceWorker' in navigator) {\r\n      navigator.serviceWorker.ready\r\n        .then(registration => {\r\n          registration.unregister();\r\n        })\r\n        .catch(error => {\r\n          console.error(error.message);\r\n        });\r\n    }\r\n  }\r\n  ","import {\r\n    VisibilityFilters,\r\n    SET_VISIBILITY_FILTER,\r\n    ADD_ITEM,\r\n    REMOVE_ITEM,\r\n    TOGGLE_ITEM,\r\n  } from \"./actions\";\r\n  import { combineReducers } from \"redux\";\r\n  \r\n  function visibilityFilterReducer(state = VisibilityFilters.SHOW_ALL, action) {\r\n    switch (action.type) {\r\n      case SET_VISIBILITY_FILTER:\r\n        return action.filter;\r\n      default:\r\n        return state;\r\n    }\r\n  }\r\n  \r\n  function itemReducer(state = [], action) {\r\n    switch (action.type) {\r\n      case ADD_ITEM:\r\n        console.log(action);\r\n        return [\r\n          ...state,\r\n          {\r\n            id: action.id,\r\n            text: action.text,\r\n            completed: false,\r\n          },\r\n        ];\r\n  \r\n      case REMOVE_ITEM:\r\n        return state.filter((v) => {\r\n          return action.id !== v.id;\r\n        });\r\n  \r\n      case TOGGLE_ITEM:\r\n        return state.map((item) => {\r\n          if (item.id === action.id) {\r\n            return Object.assign({}, item, {\r\n              completed: !item.completed,\r\n            });\r\n          }\r\n          return item;\r\n        });\r\n      default:\r\n        return state;\r\n    }\r\n  }\r\n  \r\n  export const rootReducer = combineReducers({\r\n    visibilityFilter: visibilityFilterReducer,\r\n    items: itemReducer,\r\n  });\r\n  ","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { Provider } from \"react-redux\";\nimport { createStore } from \"redux\";\nimport { rootReducer } from \"./reducer\";\n\nfunction loadState() {\n\n  const serializedState = localStorage.getItem('state');\n  if (!serializedState) {\n    return undefined;\n  }\n  return JSON.parse(serializedState);\n};\nconst persistedState = loadState();\nconst store =createStore(rootReducer, persistedState);\n\nfunction saveState(state) {\n\n  const serializedState = JSON.stringify(state);\n  localStorage.setItem('state', serializedState);\n} \nstore.subscribe(() => {\n  saveState(store.getState())\n})\n\n\nReactDOM.render(\n  <Provider store={store}>\n    <React.StrictMode>\n      <App />\n    </React.StrictMode>\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}