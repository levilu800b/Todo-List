{"version":3,"sources":["redux/actions.js","components/TodoInput.js","components/TodoItem.js","components/TodoList.js","App.js","serviceWorker.js","redux/states.js","redux/store.js","redux/reducer.js","index.js"],"names":["ADD_TODO","DELETE_TODO","UPDATE_TODO","TodoInput","useState","name","setName","dispatch","useDispatch","className","onChange","e","target","value","type","onClick","todo","id","uuid","payload","TodoItem","editable","setEditable","length","console","log","updateTodo","todoId","TodoList","todos","useSelector","state","map","App","Boolean","window","location","hostname","match","store","createStore","newTodos","action","push","filter","index","i","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.57fb8558.chunk.js","sourcesContent":["export const ADD_TODO = \"ADD_TODO\";\r\nexport const DELETE_TODO = \"DELETE_TODO\";\r\nexport const UPDATE_TODO = \"UPDATE_TODO\"\r\n\r\nexport function addTodo(todo) {\r\n    return {\r\n        type: ADD_TODO,\r\n        payload: todo,\r\n    }\r\n}\r\n\r\nexport function deleteTodo(todoId) {\r\n    return {\r\n        type: DELETE_TODO,\r\n        payload: todoId,\r\n    }\r\n}\r\n\r\nexport function updateTodo(todo) {\r\n    return {\r\n        type: UPDATE_TODO,\r\n        payload: todo,\r\n    }\r\n}","import React from 'react'\r\nimport { addTodo } from '../redux/actions'\r\nimport {v1 as uuid} from 'uuid';\r\nimport  { useState } from \"react\";\r\nimport { useDispatch } from 'react-redux';\r\n\r\nfunction TodoInput() {\r\n    let [name, setName] = useState();\r\n    let dispatch = useDispatch();\r\n    return (\r\n        <div>\r\n            <div className=\"row m-2\">\r\n                <input \r\n                onChange={(e) => setName(e.target.value)}\r\n                value={name}\r\n                type=\"text\" \r\n                className=\" col form-control\" />\r\n                <button \r\n                onClick={() => {\r\n                    dispatch(addTodo(\r\n                        {\r\n                            id: uuid(),\r\n                            name: name\r\n                        }\r\n                    ));\r\n                setName('');\r\n                }}\r\n                className=\"btn btn-primary mx-2\">Add Todo</button>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default TodoInput\r\n","import React from 'react'\r\nimport { useDispatch } from 'react-redux';\r\nimport { deleteTodo, updateTodo } from '../redux/actions';\r\nimport { useState } from 'react'\r\n\r\nfunction TodoItem({ todo }) {\r\n    const [editable, setEditable] = useState(false);\r\n    const [name, setName] = useState(todo.name);\r\n    let dispatch = useDispatch()\r\n    return (\r\n        <div>\r\n            <div className=\"row mx-2 align-items-center\">\r\n                <div>{todo.id.length > 1? todo.id[2] : todo.id}</div>\r\n                <div className=\"col\">\r\n                    {editable? <input type=\"text\" className=\"form-control\" \r\n                    value={name}\r\n                    onChange={\r\n                        (e)=>setName(e.target.value)\r\n                    }\r\n                    /> : <h4>{todo.name}</h4>}\r\n                </div>\r\n                <button \r\n                onClick={() => {\r\n                    console.log();\r\n                    dispatch(updateTodo(\r\n                        {\r\n                            ...todo,\r\n                            name: name\r\n                        }\r\n                    ));\r\n                    if(editable) {\r\n                        setName(todo.name);\r\n                    }\r\n                    setEditable(!editable);\r\n                }}\r\n                className=\"btn btn-primary m-2\"\r\n                >{editable ? \"Update\" : \"Edit\"}</button>\r\n                <button\r\n                onClick={()=>dispatch(deleteTodo(todo.id))}\r\n                className=\"btn btn-danger m-2\"\r\n                >Delete</button>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default TodoItem\r\n","import React from 'react'\r\nimport TodoItem from './TodoItem'\r\nimport { useSelector } from 'react-redux'\r\n\r\nfunction TodoList() {\r\n    let todos = useSelector(state => state)\r\n    return (\r\n        <div className=\"my-4\">\r\n            {todos.map(todo=> {\r\n                return <TodoItem key={todo.id} todo={todo}/>\r\n            })}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default TodoList\r\n","import React from 'react';\nimport './App.css';\nimport TodoInput from './components/TodoInput';\nimport TodoList from './components/TodoList';\nimport 'bootstrap/dist/css/bootstrap.css';\n\nfunction App() {\n  return (\n    <container>\n    <div className=\"App m-5\">\n      <h1>TODO APP</h1>\n      <TodoInput />\n      <TodoList />\n    </div>\n    </container>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n    window.location.hostname === 'localhost' ||\r\n      // [::1] is the IPv6 localhost address.\r\n      window.location.hostname === '[::1]' ||\r\n      // 127.0.0.0/8 are considered localhost for IPv4.\r\n      window.location.hostname.match(\r\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n      )\r\n  );\r\n  \r\n  export function register(config) {\r\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n      // The URL constructor is available in all browsers that support SW.\r\n      const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n      if (publicUrl.origin !== window.location.origin) {\r\n        // Our service worker won't work if PUBLIC_URL is on a different origin\r\n        // from what our page is served on. This might happen if a CDN is used to\r\n        // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n        return;\r\n      }\r\n  \r\n      window.addEventListener('load', () => {\r\n        const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n  \r\n        if (isLocalhost) {\r\n          // This is running on localhost. Let's check if a service worker still exists or not.\r\n          checkValidServiceWorker(swUrl, config);\r\n  \r\n          // Add some additional logging to localhost, pointing developers to the\r\n          // service worker/PWA documentation.\r\n          navigator.serviceWorker.ready.then(() => {\r\n            console.log(\r\n              'This web app is being served cache-first by a service ' +\r\n                'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n            );\r\n          });\r\n        } else {\r\n          // Is not localhost. Just register service worker\r\n          registerValidSW(swUrl, config);\r\n        }\r\n      });\r\n    }\r\n  }\r\n  \r\n  function registerValidSW(swUrl, config) {\r\n    navigator.serviceWorker\r\n      .register(swUrl)\r\n      .then(registration => {\r\n        registration.onupdatefound = () => {\r\n          const installingWorker = registration.installing;\r\n          if (installingWorker == null) {\r\n            return;\r\n          }\r\n          installingWorker.onstatechange = () => {\r\n            if (installingWorker.state === 'installed') {\r\n              if (navigator.serviceWorker.controller) {\r\n                // At this point, the updated precached content has been fetched,\r\n                // but the previous service worker will still serve the older\r\n                // content until all client tabs are closed.\r\n                console.log(\r\n                  'New content is available and will be used when all ' +\r\n                    'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n                );\r\n  \r\n                // Execute callback\r\n                if (config && config.onUpdate) {\r\n                  config.onUpdate(registration);\r\n                }\r\n              } else {\r\n                // At this point, everything has been precached.\r\n                // It's the perfect time to display a\r\n                // \"Content is cached for offline use.\" message.\r\n                console.log('Content is cached for offline use.');\r\n  \r\n                // Execute callback\r\n                if (config && config.onSuccess) {\r\n                  config.onSuccess(registration);\r\n                }\r\n              }\r\n            }\r\n          };\r\n        };\r\n      })\r\n      .catch(error => {\r\n        console.error('Error during service worker registration:', error);\r\n      });\r\n  }\r\n  \r\n  function checkValidServiceWorker(swUrl, config) {\r\n    // Check if the service worker can be found. If it can't reload the page.\r\n    fetch(swUrl, {\r\n      headers: { 'Service-Worker': 'script' },\r\n    })\r\n      .then(response => {\r\n        // Ensure service worker exists, and that we really are getting a JS file.\r\n        const contentType = response.headers.get('content-type');\r\n        if (\r\n          response.status === 404 ||\r\n          (contentType != null && contentType.indexOf('javascript') === -1)\r\n        ) {\r\n          // No service worker found. Probably a different app. Reload the page.\r\n          navigator.serviceWorker.ready.then(registration => {\r\n            registration.unregister().then(() => {\r\n              window.location.reload();\r\n            });\r\n          });\r\n        } else {\r\n          // Service worker found. Proceed as normal.\r\n          registerValidSW(swUrl, config);\r\n        }\r\n      })\r\n      .catch(() => {\r\n        console.log(\r\n          'No internet connection found. App is running in offline mode.'\r\n        );\r\n      });\r\n  }\r\n  \r\n  export function unregister() {\r\n    if ('serviceWorker' in navigator) {\r\n      navigator.serviceWorker.ready\r\n        .then(registration => {\r\n          registration.unregister();\r\n        })\r\n        .catch(error => {\r\n          console.error(error.message);\r\n        });\r\n    }\r\n  }\r\n  ","export let todos = [\r\n    {\r\n        id: 1,\r\n        name: \"One\",\r\n    },\r\n    {\r\n        id: 2,\r\n        name: \"Two\",\r\n    },\r\n    {\r\n        id: 3,\r\n        name: \"Three\",\r\n    }\r\n]","import { createStore } from 'redux';\r\nimport {reducer} from './reducer';\r\n\r\nexport let store = createStore(reducer);","import { ADD_TODO, UPDATE_TODO, DELETE_TODO } from './actions';\r\nimport { todos } from './states';\r\n\r\n\r\nexport let reducer = (state = todos, action) => {\r\n    let newTodos;\r\n    switch (action.type) {\r\n        case ADD_TODO:\r\n             newTodos = [...state];\r\n            newTodos.push(action.payload);\r\n            return newTodos;\r\n            case DELETE_TODO:\r\n                 newTodos = [...state];\r\n                newTodos = newTodos.filter(todo=>todo.id !== action.payload)\r\n            return newTodos;\r\n            case UPDATE_TODO:\r\n            newTodos = [...state];\r\n          let index = -1;\r\n          for (let i = 0; i < newTodos.length; i++){\r\n              index++\r\n              if(newTodos[i].id === action.payload.id) {\r\n                  break;\r\n              }\r\n          }\r\n            if (index !== -1) {\r\n                newTodos[index] = action.payload;\r\n                return newTodos;\r\n            }\r\n        // eslint-disable-next-line no-fallthrough\r\n        default:\r\n    }\r\n    return state;\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from \"./serviceWorker\";\nimport { Provider } from 'react-redux';\nimport {store} from './redux/store';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n    <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}